#!/usr/bin/env python3
"""
Quick setup script for GitHub Productivity Dashboard credentials.
Run this to easily input your credentials and start the dashboard.
"""

import os
import sys
import subprocess
import getpass
from main import validate_github_token, validate_openai_key, validate_repository_url


def get_credentials():
    """Interactive credential collection."""
    print("üöÄ GitHub Productivity Dashboard - Credential Setup")
    print("=" * 55)
    
    credentials = {}
    
    # GitHub Token
    print("\n1Ô∏è‚É£ GitHub Personal Access Token")
    print("   ‚Ä¢ Go to: https://github.com/settings/tokens")
    print("   ‚Ä¢ Create a token with 'repo' permissions")
    print("   ‚Ä¢ Token format: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
    
    while True:
        github_token = getpass.getpass("   Enter GitHub PAT: ").strip()
        if validate_github_token(github_token):
            credentials['GITHUB_TOKEN'] = github_token
            print("   ‚úÖ Valid GitHub token format")
            break
        else:
            print("   ‚ùå Invalid token format. Please try again.")
    
    # Repository URL
    print("\n2Ô∏è‚É£ Repository URL")
    print("   ‚Ä¢ Format: owner/repo or https://github.com/owner/repo")
    print("   ‚Ä¢ Example: microsoft/vscode")
    
    while True:
        repo_url = input("   Enter repository: ").strip()
        valid, owner, name = validate_repository_url(repo_url)
        if valid:
            credentials['REPO_URL'] = f"{owner}/{name}"
            print(f"   ‚úÖ Valid repository: {owner}/{name}")
            break
        else:
            print("   ‚ùå Invalid repository format. Please try again.")
    
    # OpenAI API Key (Optional)
    print("\n3Ô∏è‚É£ OpenAI API Key (Optional - for AI insights)")
    print("   ‚Ä¢ Go to: https://platform.openai.com/api-keys")
    print("   ‚Ä¢ Create an API key")
    print("   ‚Ä¢ Token format: sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
    print("   ‚Ä¢ Press Enter to skip")
    
    openai_key = getpass.getpass("   Enter OpenAI key (or press Enter to skip): ").strip()
    if openai_key:
        if validate_openai_key(openai_key):
            credentials['OPENAI_API_KEY'] = openai_key
            print("   ‚úÖ Valid OpenAI key format")
        else:
            print("   ‚ùå Invalid key format, skipping OpenAI integration")
    else:
        print("   ‚è≠Ô∏è  Skipping OpenAI integration")
    
    return credentials


def save_credentials(credentials):
    """Save credentials to environment file."""
    env_file = ".env"
    
    print(f"\nüíæ Saving credentials to {env_file}")
    
    with open(env_file, 'w') as f:
        f.write("# GitHub Productivity Dashboard Credentials\n")
        f.write("# Generated by setup_credentials.py\n\n")
        
        for key, value in credentials.items():
            f.write(f"{key}={value}\n")
    
    print(f"   ‚úÖ Credentials saved to {env_file}")
    print("   ‚ö†Ô∏è  Keep this file secure and don't commit it to version control!")


def start_dashboard():
    """Start the Streamlit dashboard."""
    print("\nüöÄ Starting GitHub Productivity Dashboard...")
    
    try:
        # Load environment variables
        if os.path.exists(".env"):
            with open(".env", 'r') as f:
                for line in f:
                    if '=' in line and not line.startswith('#'):
                        key, value = line.strip().split('=', 1)
                        os.environ[key] = value
        
        # Start Streamlit
        subprocess.run([sys.executable, "-m", "streamlit", "run", "main.py"], check=True)
        
    except KeyboardInterrupt:
        print("\nüëã Dashboard stopped by user")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to start dashboard: {e}")
    except Exception as e:
        print(f"‚ùå Error: {e}")


def main():
    """Main setup function."""
    print("Welcome to the GitHub Productivity Dashboard setup!")
    print("This script will help you configure your credentials.\n")
    
    # Check if .env already exists
    if os.path.exists(".env"):
        response = input("üìÅ Found existing .env file. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("Using existing credentials...")
            start_dashboard()
            return
    
    try:
        # Get credentials
        credentials = get_credentials()
        
        # Save credentials
        save_credentials(credentials)
        
        # Ask if user wants to start dashboard
        print("\n" + "=" * 55)
        response = input("üöÄ Start the dashboard now? (Y/n): ").strip().lower()
        
        if response != 'n':
            start_dashboard()
        else:
            print("\n‚úÖ Setup complete!")
            print("To start the dashboard later, run: streamlit run main.py")
            
    except KeyboardInterrupt:
        print("\n\nüëã Setup cancelled by user")
    except Exception as e:
        print(f"\n‚ùå Setup failed: {e}")


if __name__ == "__main__":
    main()